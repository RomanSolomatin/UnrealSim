// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InputMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION

#include "UnrealSim.h"
#include "Messages/InputMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* InputMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InputMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_InputMessage_2eproto() {
  protobuf_AddDesc_InputMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "InputMessage.proto");
  GOOGLE_CHECK(file != NULL);
  InputMessage_descriptor_ = file->message_type(0);
  static const int InputMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputMessage, ahead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputMessage, back_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputMessage, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputMessage, right_),
  };
  InputMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InputMessage_descriptor_,
      InputMessage::default_instance_,
      InputMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InputMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_InputMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InputMessage_descriptor_, &InputMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_InputMessage_2eproto() {
  delete InputMessage::default_instance_;
  delete InputMessage_reflection_;
}

void protobuf_AddDesc_InputMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022InputMessage.proto\"H\n\014InputMessage\022\r\n\005"
    "ahead\030\001 \002(\010\022\014\n\004back\030\002 \002(\010\022\014\n\004left\030\003 \002(\010\022"
    "\r\n\005right\030\004 \002(\010", 94);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "InputMessage.proto", &protobuf_RegisterTypes);
  InputMessage::default_instance_ = new InputMessage();
  InputMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_InputMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_InputMessage_2eproto {
  StaticDescriptorInitializer_InputMessage_2eproto() {
    protobuf_AddDesc_InputMessage_2eproto();
  }
} static_descriptor_initializer_InputMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int InputMessage::kAheadFieldNumber;
const int InputMessage::kBackFieldNumber;
const int InputMessage::kLeftFieldNumber;
const int InputMessage::kRightFieldNumber;
#endif  // !_MSC_VER

InputMessage::InputMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InputMessage)
}

void InputMessage::InitAsDefaultInstance() {
}

InputMessage::InputMessage(const InputMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InputMessage)
}

void InputMessage::SharedCtor() {
  _cached_size_ = 0;
  ahead_ = false;
  back_ = false;
  left_ = false;
  right_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InputMessage::~InputMessage() {
  // @@protoc_insertion_point(destructor:InputMessage)
  SharedDtor();
}

void InputMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InputMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InputMessage_descriptor_;
}

const InputMessage& InputMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InputMessage_2eproto();
  return *default_instance_;
}

InputMessage* InputMessage::default_instance_ = NULL;

InputMessage* InputMessage::New() const {
  return new InputMessage;
}

void InputMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InputMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ahead_, right_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InputMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InputMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool ahead = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ahead_)));
          set_has_ahead();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_back;
        break;
      }

      // required bool back = 2;
      case 2: {
        if (tag == 16) {
         parse_back:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &back_)));
          set_has_back();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_left;
        break;
      }

      // required bool left = 3;
      case 3: {
        if (tag == 24) {
         parse_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_right;
        break;
      }

      // required bool right = 4;
      case 4: {
        if (tag == 32) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InputMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InputMessage)
  return false;
#undef DO_
}

void InputMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InputMessage)
  // required bool ahead = 1;
  if (has_ahead()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ahead(), output);
  }

  // required bool back = 2;
  if (has_back()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->back(), output);
  }

  // required bool left = 3;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->left(), output);
  }

  // required bool right = 4;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->right(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InputMessage)
}

::google::protobuf::uint8* InputMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InputMessage)
  // required bool ahead = 1;
  if (has_ahead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ahead(), target);
  }

  // required bool back = 2;
  if (has_back()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->back(), target);
  }

  // required bool left = 3;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->left(), target);
  }

  // required bool right = 4;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->right(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InputMessage)
  return target;
}

int InputMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool ahead = 1;
    if (has_ahead()) {
      total_size += 1 + 1;
    }

    // required bool back = 2;
    if (has_back()) {
      total_size += 1 + 1;
    }

    // required bool left = 3;
    if (has_left()) {
      total_size += 1 + 1;
    }

    // required bool right = 4;
    if (has_right()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InputMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InputMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InputMessage::MergeFrom(const InputMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ahead()) {
      set_ahead(from.ahead());
    }
    if (from.has_back()) {
      set_back(from.back());
    }
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InputMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputMessage::CopyFrom(const InputMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void InputMessage::Swap(InputMessage* other) {
  if (other != this) {
    std::swap(ahead_, other->ahead_);
    std::swap(back_, other->back_);
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InputMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InputMessage_descriptor_;
  metadata.reflection = InputMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
